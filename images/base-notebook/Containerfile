# Dockerfile to build on top of - Using Ubuntu 22:04
FROM hub.k8s.ucar.edu/cislcloudpilot/jhub-base:2024-09-05.20

# jhub-base image uses jovyan as the default user, need to install things with root for now
USER root

# Setup environment to match variables set by repo2docker as much as possible
# The name of the conda environment into which the requested packages are installed
ENV CONDA_ENV=cisl-cloud-base \
    CONDA_USR_DIR=/srv/base-conda 

# All env vars that reference other env vars need to be in their own ENV block
# Path to the python environment where the jupyter notebook packages are installed
ENV NB_PYTHON_PREFIX=${CONDA_USR_DIR}/envs/${CONDA_ENV} 

# Add both our notebook env as well as default conda installation to $PATH
# Thus, when we start a `python` process (for kernels, or notebooks, etc),
# it loads the python in the notebook conda environment, as that comes
# first here.
ENV PATH=${CONDA_DIR}/bin:${NB_PYTHON_PREFIX}/bin:${PATH}

# Create the directories where conda environments are going to be installed
RUN mkdir -p "${CONDA_USR_DIR}" && \
    fix-permissions "${CONDA_USR_DIR}"

# Change to /tmp to work out
WORKDIR /tmp

# Copy pip and conda packages in to tmp
COPY packages/cisl-cloud-base.yml packages/npl-2023b.yml packages/npl-2024a.yml packages/r-4.3.yml /tmp/

# Copy the initial condarc file over to define conda congiruation
COPY --chown="${NB_UID}:${NB_GID}" configs/.init-condarc "${CONDA_DIR}/.condarc"

# Update conda
RUN conda update -n base -c conda-forge conda

# Create the conda envs with mamba to increase installation speed
RUN mamba env create --name ${CONDA_ENV} -f cisl-cloud-base.yml \
    && mamba env create -f npl-2023b.yml \
    && mamba env create -f npl-2024a.yml \
    && mamba env create -f r-4.3.yml \
    && mamba clean -afy \
    # Fix permissions
    && fix-permissions "${CONDA_DIR}" \
    && fix-permissions "${CONDA_USR_DIR}" \
    && fix-permissions "/home/${NB_USER}"

# Run conda activate each time a bash shell starts, so users don't have to manually type conda activate
# Note this is only read by shell, but not by the jupyter notebook - that relies
# on us starting the correct `python` process, which we do by adding the notebook conda environment's
# bin to PATH earlier ($NB_PYTHON_PREFIX/bin)
RUN echo ". ${CONDA_DIR}/etc/profile.d/conda.sh ; conda activate ${CONDA_ENV}" > /etc/profile.d/init_conda.sh

###
# Julia Install
###

ARG julia_version="1.9.1"

# Julia dependencies
# install Julia packages in /opt/julia instead of ${HOME}
ENV JULIA_DEPOT_PATH=/opt/julia \
    JULIA_PKGDIR=/opt/julia \
    JULIA_VERSION="${julia_version}"

# hadolint ignore=SC2046
RUN set -x && \
    julia_arch=$(uname -m) && \
    julia_short_arch="x64"; \
    julia_installer="julia-${JULIA_VERSION}-linux-${julia_arch}.tar.gz" && \
    julia_major_minor=$(echo "${JULIA_VERSION}" | cut -d. -f 1,2) && \
    mkdir "/opt/julia-${JULIA_VERSION}" && \
    wget -q "https://julialang-s3.julialang.org/bin/linux/${julia_short_arch}/${julia_major_minor}/${julia_installer}" && \
    tar xzf "${julia_installer}" -C "/opt/julia-${JULIA_VERSION}" --strip-components=1 && \
    rm "${julia_installer}" && \
    ln -fs /opt/julia-*/bin/julia /usr/local/bin/julia

# Show Julia where conda libraries are \
RUN mkdir /etc/julia && \
    echo "push!(Libdl.DL_LOAD_PATH, \"${CONDA_DIR}/lib\")" >> /etc/julia/juliarc.jl && \
    # Create JULIA_PKGDIR \
    mkdir "${JULIA_PKGDIR}" && \
    chown "${NB_USER}" "${JULIA_PKGDIR}" 
    #fix-permissions "${JULIA_PKGDIR}"

# Add Julia packages.
# Install IJulia as jovyan and then move the kernelspec out
# to the system share location. Avoids problems with runtime UID change not
# taking effect properly on the .local folder in the jovyan home dir.
RUN julia -e 'import Pkg; Pkg.update()' && \
    julia -e 'import Pkg; Pkg.add("HDF5")' && \
    julia -e 'using Pkg; pkg"add IJulia"; pkg"precompile"' && \
    # move kernelspec out of home \
    mv "${HOME}/.local/share/jupyter/kernels/julia"* "${CONDA_DIR}/share/jupyter/kernels/" && \
    chmod -R go+rx "${CONDA_DIR}/share/jupyter" && \
    rm -rf "${HOME}/.local"
    #fix-permissions "${JULIA_PKGDIR}" "${CONDA_DIR}/share/jupyter"

# Copy the jupyter configuration
COPY configs/jupyter_server_config.py /etc/jupyter/jupyter_server_config.py

# Copy default bashrc
COPY configs/.bashrc /etc/bash.bashrc

# Copy the final condarc file over to define conda congiruation
COPY --chown="${NB_UID}:${NB_GID}" configs/.condarc "${CONDA_DIR}/.condarc"

# Make the conda environments we install read only and executable for the user
# They can run the environments but will get permission denied when trying to make changes
# New environments are installed to /home/jovyan/.jupyter with write permissions for the users
RUN chmod 755 /srv/base-conda/cisl-cloud-base/* && \
    chmod 755 /srv/base-conda/npl-2023b/* && \
    chmod 755 /srv/base-conda/npl-2024a/* && \
    chmod 755 /srv/base-conda/r-4.3/* && \
    chown root:root /srv/*   

# Cleanup files that were already installed
RUN rm -rf /tmp/cisl-cloud-base.yml && \
    rm -rf /tmp/npl-2023b.yml && \
    rm -rf /tmp/npl-2024a.yml && \
    rm -rf /tmp/r-4.3.yml && \
    rm -rf /tmp/requirements.txt

# Set the default user to jovyan and make home /hom/jovyan
USER ${NB_USER}
WORKDIR ${HOME}

# The Entrypoint is the /srv/start script
ENTRYPOINT ["/srv/start"]
